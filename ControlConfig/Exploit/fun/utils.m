//
//  utils.m
//  kfd
//
//  Created by Seo Hyun-gyu on 2023/07/30.
//

#import "utils.h"
#import "helpers.h"
#import "krw.h"
#import "offsets.h"
#import "proc.h"
#include "thanks_opa334dev_htrowii.h"
#import "vnode.h"
#import <Foundation/Foundation.h>
#import <dirent.h>
#include <stdint.h>
#include <stdio.h>
#include <sys/_types/_off_t.h>
#import <sys/stat.h>
#import <sys/statvfs.h>

uint64_t createFolderAndRedirect(uint64_t vnode, NSString *mntPath) {
  [[NSFileManager defaultManager] removeItemAtPath:mntPath error:nil];
  [[NSFileManager defaultManager] createDirectoryAtPath:mntPath
                            withIntermediateDirectories:NO
                                             attributes:nil
                                                  error:nil];
  uint64_t orig_to_v_data =
      funVnodeRedirectFolderFromVnode(mntPath.UTF8String, vnode);

  return orig_to_v_data;
}

uint64_t UnRedirectAndRemoveFolder(uint64_t orig_to_v_data, NSString *mntPath) {
  funVnodeUnRedirectFolder(mntPath.UTF8String, orig_to_v_data);
  [[NSFileManager defaultManager] removeItemAtPath:mntPath error:nil];

  return 0;
}

int setResolution(NSString *path, NSInteger height, NSInteger width) {
  NSDictionary *dictionary =
      @{@"canvas_height" : @(height),
        @"canvas_width" : @(width)};

  BOOL success = [dictionary writeToFile:path atomically:YES];
  if (!success) {
    printf("[-] Failed createPlistAtPath.\n");
    return -1;
  }

  return 0;
}

int ResSet16(NSInteger height, NSInteger width) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];

  // 1. Create /var/tmp/com.apple.iokit.IOMobileGraphicsFamily.plist
  uint64_t var_vnode = getVnodeVar();
  uint64_t var_tmp_vnode = findChildVnodeByVnode(var_vnode, "tmp");
  printf("[i] /var/tmp vnode: 0x%llx\n", var_tmp_vnode);
  uint64_t orig_to_v_data = createFolderAndRedirect(var_tmp_vnode, mntPath);

  // iPhone 14 Pro Max Resolution
  setResolution([mntPath stringByAppendingString:
                             @"/com.apple.iokit.IOMobileGraphicsFamily.plist"],
                height, width);

  UnRedirectAndRemoveFolder(orig_to_v_data, mntPath);

  // 2. Create symbolic link
  // /var/tmp/com.apple.iokit.IOMobileGraphicsFamily.plist ->
  // /var/mobile/Library/Preferences/com.apple.iokit.IOMobileGraphicsFamily.plist
  uint64_t preferences_vnode = getVnodePreferences();
  orig_to_v_data = createFolderAndRedirect(preferences_vnode, mntPath);

  remove([mntPath stringByAppendingString:
                      @"/com.apple.iokit.IOMobileGraphicsFamily.plist"]
             .UTF8String);
  printf("symlink ret: %d\n",
         symlink("/var/tmp/com.apple.iokit.IOMobileGraphicsFamily.plist",
                 [mntPath stringByAppendingString:
                              @"/com.apple.iokit.IOMobileGraphicsFamily.plist"]
                     .UTF8String));
  UnRedirectAndRemoveFolder(orig_to_v_data, mntPath);

  // 3. xpc restart
  do_kclose();
  sleep(1);
  xpc_crasher("com.apple.cfprefsd.daemon");
  xpc_crasher("com.apple.backboard.TouchDeliveryPolicyServer");

  return 0;
}

int removeSMSCache(void) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];

  uint64_t library_vnode = getVnodeLibrary();
  uint64_t sms_vnode = findChildVnodeByVnode(library_vnode, "SMS");

  // find SMS vnode, it will hang some seconds. To reduce trycount, open Message
  // and close, and try again. / or go home and back app.
  int trycount = 0;
  while (1) {
    if (sms_vnode != 0)
      break;
    sms_vnode = findChildVnodeByVnode(library_vnode, "SMS");
    trycount++;
  }
  printf("[i] /var/mobile/Library/SMS vnode: 0x%llx, trycount: %d\n", sms_vnode,
         trycount);

  uint64_t orig_to_v_data = createFolderAndRedirect(sms_vnode, mntPath);

  NSArray *dirs =
      [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                          error:NULL];
  NSLog(@"/var/mobile/Library/SMS directory list: %@", dirs);

  remove(
      [mntPath
          stringByAppendingString:@"/com.apple.messages.geometrycache_v7.plist"]
          .UTF8String);

  dirs = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                             error:NULL];
  NSLog(@"/var/mobile/Library/SMS directory list: %@", dirs);

  UnRedirectAndRemoveFolder(orig_to_v_data, mntPath);

  return 0;
}

int ControlCenterReadTest(void) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];
  uint64_t var_mobile_library_vnode = getVnodeLibrary();
  uint64_t mobile_vn = getVnodeVarMobile();
  printf("[i] /var/mobile/Library vnode: 0x%llx\n", var_mobile_library_vnode);
  funVnodeIterateByVnode(var_mobile_library_vnode);

  uint64_t library_vn_2 = findChildVnodeByVnode(mobile_vn, "Library");
  uint64_t var_cc_vnode =
      findChildVnodeByVnode(var_mobile_library_vnode, "ControlCenter");

  int trycount = 0;
  while (1) {
    if (var_cc_vnode != 0)
      break;

    if (trycount == 10000)
      break;
    var_cc_vnode =
        findChildVnodeByVnode(var_mobile_library_vnode, "ControlCenter");
    trycount++;
  }

  while (1) {
    if (var_cc_vnode != 0)
      break;

    if (trycount == 10000)
      break;
    library_vn_2 = findChildVnodeByVnode(mobile_vn, "Library");
    trycount++;
  }
  printf("[i] /var/mobile/Library/ControlCenter vnode: 0x%llx, trycount: %d\n",
         var_cc_vnode, trycount);
  printf("[i] /var/mobile/Library vnode m1: 0x%llx, trycount: %d\n",
         library_vn_2, trycount);
  if (library_vn_2 != 0) {
    funVnodeIterateByVnode(library_vn_2);
  }

  //    uint64_t cc_vnode = findChildVnodeByVnode(var_mobile_library_vnode,
  //    "ControlCenter");

  //    uint64_t orig_to_v_data =
  //    createFolderAndRedirect(var_mobile_library_vnode, mntPath); NSString
  //    *cc_mntPath = [NSString stringWithFormat:@"%@%@", NSHomeDirectory(),
  //    @"/Documents/mounted/ControlCenter"];
  //
  //    NSArray* dirs = [[NSFileManager defaultManager]
  //    contentsOfDirectoryAtPath:cc_mntPath error:NULL];
  //    NSLog(@"/var/mobile/Library directory list: %@", dirs);

  return 0;
}

int VarMobile_ListFiles(void) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];

  uint64_t var_mobile_vnode = getVnodeVarMobile();

  uint64_t orig_to_v_data = createFolderAndRedirect(var_mobile_vnode, mntPath);

  NSArray *dirs =
      [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                          error:NULL];
  NSLog(@"/var/mobile directory list: %@", dirs);
  return 0;
}

int VarLibrary_ListFiles(void) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];
  uint64_t library_vnode = getVnodeLibrary();
  uint64_t orig_to_v_data = createFolderAndRedirect(library_vnode, mntPath);
  NSArray *dirs =
      [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                          error:NULL];
  NSLog(@"/var/mobile/Library directory list: %@", dirs);
  return 0;
}

int VarMobileWriteTest(void) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];

  uint64_t var_mobile_vnode = getVnodeVarMobile();

  uint64_t orig_to_v_data = createFolderAndRedirect(var_mobile_vnode, mntPath);

  NSArray *dirs =
      [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                          error:NULL];
  NSLog(@"/var/mobile directory list: %@", dirs);

  // create
  [@"PLZ_GIVE_ME_GIRLFRIENDS!@#"
      writeToFile:[mntPath stringByAppendingString:@"/can_i_remove_file"]
       atomically:YES
         encoding:NSUTF8StringEncoding
            error:nil];

  dirs = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                             error:NULL];
  NSLog(@"/var/mobile directory list: %@", dirs);

  UnRedirectAndRemoveFolder(orig_to_v_data, mntPath);

  return 0;
}

int VarMobileRemoveTest(void) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];

  uint64_t var_mobile_vnode = getVnodeVarMobile();

  uint64_t orig_to_v_data = createFolderAndRedirect(var_mobile_vnode, mntPath);

  NSArray *dirs =
      [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                          error:NULL];
  NSLog(@"/var/mobile directory list: %@", dirs);

  // remove
  int ret = remove(
      [mntPath stringByAppendingString:@"/can_i_remove_file"].UTF8String);
  printf("remove ret: %d\n", ret);

  dirs = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                             error:NULL];
  NSLog(@"/var/mobile directory list: %@", dirs);

  UnRedirectAndRemoveFolder(orig_to_v_data, mntPath);

  return 0;
}

int setSuperviseMode(BOOL enable) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];
  // /var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationDetails.plist

  uint64_t systemgroup_vnode = getVnodeSystemGroup();

  // must enter 3 subdirectories
  uint64_t configurationprofiles_vnode = findChildVnodeByVnode(
      systemgroup_vnode, "systemgroup.com.apple.configurationprofiles");
  while (1) {
    if (configurationprofiles_vnode != 0)
      break;
    configurationprofiles_vnode = findChildVnodeByVnode(
        systemgroup_vnode, "systemgroup.com.apple.configurationprofiles");
  }
  printf("[i] "
         "/var/containers/Shared/SystemGroup/"
         "systemgroup.com.apple.configurationprofiles vnode: 0x%llx\n",
         configurationprofiles_vnode);

  configurationprofiles_vnode =
      findChildVnodeByVnode(configurationprofiles_vnode, "Library");
  while (1) {
    if (configurationprofiles_vnode != 0)
      break;
    configurationprofiles_vnode =
        findChildVnodeByVnode(configurationprofiles_vnode, "Library");
  }
  printf("[i] "
         "/var/containers/Shared/SystemGroup/"
         "systemgroup.com.apple.configurationprofiles/Library vnode: 0x%llx\n",
         configurationprofiles_vnode);

  configurationprofiles_vnode = findChildVnodeByVnode(
      configurationprofiles_vnode, "ConfigurationProfiles");
  while (1) {
    if (configurationprofiles_vnode != 0)
      break;
    configurationprofiles_vnode = findChildVnodeByVnode(
        configurationprofiles_vnode, "ConfigurationProfiles");
  }
  printf("[i] "
         "/var/containers/Shared/SystemGroup/"
         "systemgroup.com.apple.configurationprofiles/Library/"
         "ConfigurationProfiles vnode: 0x%llx\n",
         configurationprofiles_vnode);

  uint64_t orig_to_v_data =
      createFolderAndRedirect(configurationprofiles_vnode, mntPath);

  NSArray *dirs =
      [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                          error:NULL];
  NSLog(@"/var/containers/Shared/SystemGroup/"
        @"systemgroup.com.apple.configurationprofiles/Library/"
        @"ConfigurationProfiles directory list:\n %@",
        dirs);

  // set value of "IsSupervised" key
  NSString *plistPath =
      [mntPath stringByAppendingString:@"/CloudConfigurationDetails.plist"];

  NSMutableDictionary *plist =
      [NSMutableDictionary dictionaryWithContentsOfFile:plistPath];

  if (plist) {
    // Set the value of "IsSupervised" key to true
    [plist setObject:@(enable) forKey:@"IsSupervised"];

    // Save the updated plist back to the file
    if ([plist writeToFile:plistPath atomically:YES]) {
      printf("[+] Successfully set IsSupervised in the plist.");
    } else {
      printf("[-] Failed to write the updated plist to file.");
    }
  } else {
    printf("[-] Failed to load the plist file.");
  }

  UnRedirectAndRemoveFolder(orig_to_v_data, mntPath);

  return 0;
}

int removeKeyboardCache(void) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];

  uint64_t vnode =
      getVnodeAtPath("/var/mobile/Library/Caches/com.apple.keyboards/images");
  if (vnode == -1)
    return 0;

  uint64_t orig_to_v_data = createFolderAndRedirect(vnode, mntPath);

  NSArray *dirs =
      [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                          error:NULL];
  NSLog(@"/var/mobile/Library/Caches/com.apple.keyboards/images directory "
        @"list:\n %@",
        dirs);

  for (NSString *dir in dirs) {
    NSString *path = [NSString stringWithFormat:@"%@/%@", mntPath, dir];
    [[NSFileManager defaultManager] removeItemAtPath:path error:nil];
  }

  dirs = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:mntPath
                                                             error:NULL];
  NSLog(@"/var/mobile/Library/Caches/com.apple.keyboards/images directory "
        @"list:\n %@",
        dirs);

  UnRedirectAndRemoveFolder(orig_to_v_data, mntPath);

  return 0;
}

#define COUNTRY_KEY @"h63QSdBCiT/z0WU6rdQv6Q"
#define REGION_KEY @"zHeENZu+wbg7PUprwNwBWg"
int regionChanger(NSString *country_value, NSString *region_value) {
  NSString *plistPath = @"/var/containers/Shared/SystemGroup/"
                        @"systemgroup.com.apple.mobilegestaltcache/Library/"
                        @"Caches/com.apple.MobileGestalt.plist";
  NSString *rewrittenPlistPath =
      [NSString stringWithFormat:@"%@%@", NSHomeDirectory(),
                                 @"/Documents/com.apple.MobileGestalt.plist"];

  remove(rewrittenPlistPath.UTF8String);

  NSDictionary *dict1 = [NSDictionary dictionaryWithContentsOfFile:plistPath];
  NSMutableDictionary *mdict1 =
      dict1 ? [dict1 mutableCopy] : [NSMutableDictionary dictionary];
  NSDictionary *dict2 = dict1[@"CacheExtra"];

  NSMutableDictionary *mdict2 =
      dict2 ? [dict2 mutableCopy] : [NSMutableDictionary dictionary];
  mdict2[COUNTRY_KEY] = country_value;
  mdict2[REGION_KEY] = region_value;
  [mdict1 setObject:mdict2 forKey:@"CacheExtra"];

  NSData *binaryData = [NSPropertyListSerialization
      dataWithPropertyList:mdict1
                    format:NSPropertyListBinaryFormat_v1_0
                   options:0
                     error:nil];
  [binaryData writeToFile:rewrittenPlistPath atomically:YES];

  funVnodeOverwriteFile(plistPath.UTF8String, rewrittenPlistPath.UTF8String);

  return 0;
}

int CCPath_ListFiles(void) {
  uint64_t cc_vn =
      getVnodeAtPathByChdir("/private/var/mobile/Library/ControlCenter");
  printf("[i] ControlCenter vnode: 0x%llx", cc_vn);
  if (cc_vn == -1)
    return 0;

  uint64_t child_vn = getFirstFileChildOfVnode(cc_vn);
  printf("[i] First file child of ControlCenter vnode: 0x%llx", child_vn);
  if (child_vn == -1)
    return 0;

  uint64_t vp_nameptr = kread64(child_vn + off_vnode_v_name);
  char vp_name[256];
  //  do_kread(vp_nameptr, &vp_name, 32);
  kreadbuf(vp_nameptr, &vp_name, 256);

  printf("\n[i] moduleconf->v_name: %s\n", vp_name);

  char *filename =
      "/private/var/mobile/Library/ControlCenter/ModuleConfiguration.plist";
  uint64_t v_data = kread64(child_vn + off_vnode_v_data);

  uid_t uid = 501;
  gid_t gid = 501;
  uint32_t v_uid = kread32(v_data + 0x80);
  uint32_t v_gid = kread32(v_data + 0x84);

  // vnode->v_data->uid
  printf("[i] Patching %s vnode->v_uid %d -> %d\n", filename, v_uid, uid);
  kwrite32(v_data + 0x80, uid);
  // vnode->v_data->gid
  printf("[i] Patching %s vnode->v_gid %d -> %d\n", filename, v_gid, gid);
  kwrite32(v_data + 0x84, gid);

  int idx = open(filename, O_RDONLY);
  if (idx == -1) {
    // print errno
    printf("[-] open() failed: %d - %s\n", errno, strerror(errno));
    return 0;
  }

  off_t file_size = lseek(idx, 0, SEEK_END);
  printf("[i] moduleconf->v_size: %lld\n", file_size);

  // file is an image, so we need to not use char...
  // char *file_contents = malloc(file_size);
  uint8_t *file_contents = malloc(file_size);
  kreadbuf(v_data, &file_contents, file_size);

  printf("[i] moduleconf->v_data/256: %s", file_contents);
  return 0;
}

NSMutableDictionary *readCCModuleConf(void) {
  NSString *mntPath = [NSString
      stringWithFormat:@"%@%@", NSHomeDirectory(), @"/Documents/mounted"];
  uint64_t cc_vn =
      getVnodeAtPathByChdir("/private/var/mobile/Library/ControlCenter");

  printf("[i] ControlCenter vnode: 0x%llx", cc_vn);
  if (cc_vn == -1)
    return 0;
  uint64_t orig_to_v_data = createFolderAndRedirect(cc_vn, mntPath);

  NSString *plistPath = [NSString
      stringWithFormat:@"%@/%@", mntPath, @"/ModuleConfiguration.plist"];
  NSLog(@"%@", plistPath);
  NSMutableDictionary *dict =
      [NSMutableDictionary dictionaryWithContentsOfFile:plistPath];
  if (!dict) {
    printf("[-] Failed to load the plist file.");
    return 0;
  }
  UnRedirectAndRemoveFolder(orig_to_v_data, mntPath);
  return dict;
}
